# Hands on Kubernetes 



The atomic unit of deployment in Kubernetes is the Pod. Each Pod has one or more containers and gets deployed to a single node in the cluster as an all-or-nothing atomic operation. 

Pods are defined and deployed declaratively using YAML manifest files, and it’s normal to deploy them via higher-level controllers such as Deployments and DaemonSets. 

If a Pod is not deployed via a controller, it’s called a static Pod. You use kubectl apply to post the YAML manifests to the API server and Kubernetes picks a worker node to run the Pod on. 

The kubelet daemon on the assigned worker node is responsible for pulling the strings to get the Pod started and then monitoring it and attempting local fixes. If the node a static Pod is running on fails, the missing Pod doesn’t get replaced.



## Deploying Pods from a manifest file

Run the following commands from the `pods` folder where you cloned "TheK8sBook"-GitHub repo to (see file pod-prepare):

```bash
cd TheK8sBook/pods
```

Create your Pod with the manifest file *pod.yml*:


```bash
sudo kubectl apply -f pod.yml
```


## Check the status of Pods

Show status of your Pod with:

```bash
sudo kubectl get Pods
```

The Pod is running on a node and is being monitored by the local kubelet process.

To get a more detailed overview use:


```bash
sudo kubectl get pods -o yaml
```

Another option is:


```bash
sudo kubectl describe pods hello-pod
```

## Running commands in Pods 

Execute commands inside the Pod:


```bash
sudo kubectl exec -it hello-pod -- sh
```

- `it` makes the session interactive

Show Pod hostname inside interactive session:

```bash
env | grep HOSTNAME
```

The hostname of the container is set to the Pod's name. Note that you should alwasy set Pad names as valid DNS names (a-z and 0-9, the minus sign and the period sign).


Type exit to get back to the terminal


```bash
exit
```

Now we can delete this Pod:

```bash
sudo kubectl delete pod hello-pod
```

