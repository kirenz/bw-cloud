---
title: "Hands on Kubernetes" 
format: 
  html: 
    embed-resources: true
    theme: 
      - cosmo 
      - custom.scss 
    toc: true 
    number-depth: 3  
    toc-title: Contents 
    toc-location: left 
    number-sections: true 
    html-math-method: mathjax 
    smooth-scroll: true 
---


## Prepare environment

We make a new directory:

```bash
mkdir github
```

Change into the directory:


```bash
cd github
```

Clone this GitHub-repo into the directory:

```bash
git clone https://github.com/nigelpoulton/TheK8sBook.git
```

List any existing Pods

```bash
sudo kubectl get pods

```

This should output: "No resources found in default namespace."



## Deploying Pods from a manifest file

Run the following commands from the `pods` folder where you cloned the book’s GitHub repo to:

```bash
cd TheK8sBook/pods
```

Create your Pod with the manifest file *pod.yml*:


```bash
sudo kubectl apply -f pod.yml
```


## Check the status of Pods

Show status of your Pod with:

```bash
sudo kubectl get Pods
```

The Pod is running on a node and is being monitored by the local kubelet process.

To get a more detailed overview use:


```bash
sudo kubectl get pods -o yaml
```

Another option is:


```bash
sudo kubectl describe pods hello-pod
```

## Running commands in Pods 

Execute commands inside the Pod:


```bash
sudo kubectl exec -it hello-pod -- sh
```

- `it` makes the session interactive

Show Pod hostname inside interactive session:

```bash
env | grep HOSTNAME
```

The hostname of the container is set to the Pod's name. Note that you should alwasy set Pad names as valid DNS names (a-z and 0-9, the minus sign and the period sign).


Type exit to get back to the terminal


```bash
exit
```

## Multi-container Pod - sidecar container

The sidecar container is long-lived and runs alongside the main application container for the entire lifecycle of the Pod.

The first container "ctr-web" is the main app container. It serves as a static web page.

The second container is called "ctr-sync" and is the sidecar. It watches a GitHub repo and syncs changes into the same shared volume.

If the content of the repo change, the "ctr-sync" sidecar will notice and update the web page.

To see it in action, you’ll need a fork of the following GitHub repo. This is so you can make a change to the repo and see those changes reflected by the app. 

https://github.com/nigelpoulton/ps-sidecar

Be sure to update the `GIT_SYNC_REPO` value in the sidecarpod.yml to reflect your forked repo and save your changes:

Open the file in VS Code or use nano:

```bash
sudo nano sidecarpod.yml 

```

Change https://github.com/nigelpoulton/ps-sidecar.git with your GitHub Repo. In my case https://github.com/kirenz/ps-sidecar

If you use nano, save with Control + O and press enter. Close nano with Control + X.

Run the following command to deploy the application. This will deploy the multi-container Pod as well as a Service object you can use to connect to the app.


```bash
sudo kubectl apply -f sidecar-cloud.yml

```

Monitor the status with:

```bash
sudo kubectl get pods

```

If the STATUS is running, use this command to get the connection details:

```bash
sudo kubectl get svc

```

```
sudo kubectl describe services svc-sidecar
```

In this example, the external IP address is pending.


To verify the pod address, enter this command:


?????
```bash
sudo kubectl get pods --output=wide

```





----

## Get external IP

This guide covers how to get service of type LoadBalancer working in a kind cluster using Metallb.

https://kind.sigs.k8s.io/docs/user/loadbalancer/

sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml



```bash
sudo kubectl wait --namespace metallb-system \
                --for=condition=ready pod \
                --selector=app=metallb \
                --timeout=90s


```


```bash
sudo docker network inspect -f '{{.IPAM.Config}}' kind
```

This will output

[{172.18.0.0/16  172.18.0.1 map[]} {fc00:f853:ccd:e793::/64   map[]}]

Create a YAML file called: metal-config.yaml 


```bash
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: example
  namespace: metallb-system
spec:
  addresses:
  - 172.18.255.1-172.18.255.250
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: empty
  namespace: metallb-system
```
Apply the contents



```bash
sudo kubectl apply -f metal-config.yaml 
```

Get the external IP

```bash
sudo kubectl get svc 

```


```bash
sudo curl http://172.18.255.1:80 
```

Go to VS Code PORTS and add a new port

172.18.255.1:80

Open the browser symbol