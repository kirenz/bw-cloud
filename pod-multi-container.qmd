# Multi-container Pod

"Sidecar container"




The sidecar container is long-lived and runs alongside the main application container for the entire lifecycle of the Pod.

The first container "ctr-web" is the main app container. It serves as a static web page.

The second container is called "ctr-sync" and is the sidecar. It watches a GitHub repo and syncs changes into the same shared volume.

If the content of the repo change, the "ctr-sync" sidecar will notice and update the web page.

## Prepare environment

To see it in action, you’ll need a fork of the following GitHub repo (this is so you can make a change to the repo and see those changes reflected by the app):

https://github.com/nigelpoulton/ps-sidecar


Be sure to update the `GIT_SYNC_REPO` value in the *sidecarpod.yml* to reflect your forked repo and save your changes:

Open the file in VS Code or use nano:

```bash
sudo nano sidecarpod.yml 

```

Change https://github.com/nigelpoulton/ps-sidecar.git with your GitHub Repo. In my case https://github.com/kirenz/ps-sidecar

If you use nano, save with Control + O and press enter. Close nano with Control + X.

## Create multi-container Pod

Run the following commands from the `pods` folder where you cloned "TheK8sBook"-GitHub repo to (see file pod-prepare). This will deploy the multi-container Pod as well as a Service object you can use to connect to the app.


```bash
sudo kubectl apply -f sidecar-cloud.yml

```

Monitor the status with:

```bash
sudo kubectl get pods

```

If the STATUS is running, use this command to get the connection details:

```bash
sudo kubectl get svc

```

To get more information, run:

```
sudo kubectl describe services svc-sidecar
```

In this example, the external IP address (which we need to take a look at our website) is pending since Kubernetes does not offer an implementation of network load balancers (Services of type LoadBalancer) for clusters like ours. This means if you’re not running on a supported IaaS platform (GCP, AWS, Azure…), LoadBalancers will remain in the “pending” state indefinitely when created. Therefore, we need to use a solution provided by MetalLB, which is described in the next section.


## Create Network load-balancer with MetalLB

MetalLB hooks into your Kubernetes cluster, and provides a network load-balancer implementation. In short, it allows you to create Kubernetes services of type LoadBalancer in clusters that don’t run on a cloud provider, and thus cannot simply hook into paid products to provide load balancers. To learn more, visit [MetalLB's website](https://metallb.universe.tf/).


The following steps cover how to get service of type LoadBalancer working in a kind cluster using Metallb (review [this tutorial from kind](https://kind.sigs.k8s.io/docs/user/loadbalancer/) for more information).



Run the following commands:

```bash
sudo kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
```



```bash
sudo kubectl wait --namespace metallb-system \
                --for=condition=ready pod \
                --selector=app=metallb \
                --timeout=90s


```


```bash
sudo docker network inspect -f '{{.IPAM.Config}}' kind
```

This will output some IP addresses like the following:

[{172.18.0.0/16  172.18.0.1 map[]} {fc00:f853:ccd:e793::/64   map[]}]


Create a YAML file called "metal-config.yaml" and change the IP addresses accordingly:  


```bash
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: example
  namespace: metallb-system
spec:
  addresses:
  - 172.18.255.1-172.18.255.250
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: empty
  namespace: metallb-system
```

Move into the folder and apply the contents

```bash
sudo kubectl apply -f metal-config.yaml 
```

That's it. Now we can obtain the external IP.


## Obtain External-IP 

Show external-IP

```bash
sudo kubectl get svc 

```

To verify the IP address, enter this command:

```bash
sudo kubectl get pods --output=wide
```

To make a quick test, open the site in yout terminal (change the IP)

```bash
sudo curl http://172.18.255.1:80 
```

The result should display some HTML code including the content of your forked repo – "This is version 1.0"


## Show web page in browser with port forwarding

To be able to access a port on the remote machine that may not be publicly exposed, you need to establish a connection or a tunnel between a port on your local machine and the server.

To browse to the web app on your local machine, you can leverage a VS Code feature called [Port Forwarding](https://code.visualstudio.com/docs/remote/ssh#_forwarding-a-port-creating-ssh-tunnel)

With the node still running, open the SSH Explorer and find the Forwarded Ports view. Click on the Forward a port link and indicate that you want to forward  a specific port.

Enter your new port (the IP address you obtained). It should looks omething like:

172.18.255.1:80

Open the browser symbol to view the page in your browser. The web page should display the content of your forked repo – "This is version 1.0"

## Make changes in GitHub

Open and edit the file index.html in your forked GitHub-repo ps-sidecar and make a change to the <h1> line (e.g. call it "This is version 2.0"). Commit the changes and open the browser tab from before (with the "This is version 1.0" web page).

Refresh your browser. The update should be reflected almost immediately in the app:

"This is version 2.0"

Congratulations. The sidecar container has successfully watched a GitHub repo and sync’d changes to your app.


Feel free to run the `sudo kubectl get pods` and `sudo kubectl describe pod` commands to see how multi-container Pods appear in the outputs.

If you are done, delete this Pod:

```bash
sudo kubectl delete pod git-sync
```
