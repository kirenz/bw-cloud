---
title: "Increase Cloud Storage"
subtitle: "Mount a volume" 
format: 
  html: 
    embed-resources: true
    theme: 
      - cosmo 
      - custom.scss 
    toc: true 
    number-depth: 3  
    toc-title: Contents 
    toc-location: left 
    number-sections: true 
    html-math-method: mathjax 
    smooth-scroll: true 
---

In this tutorial, you'll learn how to increase your cloud storage and mount the volume to a Python environment.

## Create new volume in bwCloud

1. Log into [bwCloud Dashboard](https://bw-cloud.org/q/d)

1. Click on `Volumes` below Project â†’ Volumes

1. An overview of the volumes you have created so far is displayed. To create a new volume, click on [Create Volume](https://portal.bw-cloud.org/project/volumes/create/)

1. A dialogue opens. Fill in the fields according to your requirements. We call the volume *block-device-02* and use `20` GiB.

1. Then click on Create Volume. The volume is created


## Attach volume in bwCloud

In order for a volume to be used by a virtual machine, it must be added ("attached") to your VM inside bwCloud.

1. In the table row of the desired volume, under Actions select the subitem `Manage Attachments` in the context menu at the right end of the row and click on the entry. 

1. In the dialogue, select the desired virtual machine (*ml-pipeline-01*) and click on `Attach Volume`

- The table updates and the path under which the new volume can be reached from within the virtual machine appears in the Attached To field (in my case, the volume is called *vdc*):

```
/dev/vdc on ml-pipeline-01
```

## Mount volume in VM

In Linux, the process of attaching a filesystem to a particular point in the directory tree is called mounting. This allows you to access the files and directories on the filesystem as if they were part of the filesystem on which you are currently working.

### Log in your VM

- Use VS Code to log into your virtual machine 

- Alternatively, make the connection in your terminal (replace 111.111.11.11 with your IP):

```bash
ssh -i .ssh/id_rsa ubuntu@111.111.11.11
```

### Find volumne

You can find your volume (i.e. disk) using:

```bash
sudo fdisk -l
```

The output should include an entry like the following:

```bash

Disk /dev/vdc: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
```


### Partitioning

Next, we need to partition our volume. This command will open a partition environment:


```bash
sudo parted /dev/vdc

```

We use GPT (GUID Partition Table), which is a standard for the layout of the partition table on a physical storage device:

```bash
mklabel gpt

```

If you are asked about "New disk label type?", type: gpt

If you see this warning: "Warning: The existing disk label on /dev/vdc will be destroyed and all data on this
disk will be lost. Do you want to continue?", type: Yes


Within the partition environment, you can also set the size of the partition. We set the upper bound to 25 GB.


```bash
mkpart primary 0GB 20GB

```

Enter `quit` to leave the partition environment: 

```bash
quit
```

### Format partition

Format the partition with the *ext4* filesystem. *ext4* stands for "extended file system version 4", which is a popular filesystem used in Linux systems to store and organize files on a storage device, such as a hard drive or solid-state drive. 


```bash
sudo mkfs.ext4 /dev/vdc
```

### Mounting

Before we mount the drive, we create a new directory in the `/mnt/` directory where the drives are usually mounted in Ubuntu: 


```bash
sudo mkdir /mnt/vdc

```

Once the directory is created, you can mount the drive as follows: 

```bash
sudo mount /dev/vdc /mnt/vdc

```

To mount the drive permanently, we need to edit the file system table `fstab`. Therefore, we open the file with the text editor [nano](https://www.nano-editor.org/): 

Example in nano:

```bash
sudo nano /etc/fstab

```

Now, add the following content at the end of the file:



```bash
/dev/vdc    /mnt/vdc     ext4      defaults        0             0

```

It means that the partition located at /dev/vdc will be mounted to /mnt/vdc using the file system ext4, with default mount options and no dumping and no error-checking enabled.

`Ctrl+O` will save the modifications you've made to the file. `Ctrl+X` will close nano. Confirm with `Y` and press Enter.



Use `sudo mount` to list all mounted drives and combine it with `grep vdb`, which only returns our volume vdb: 


```bash
sudo mount | grep vdc

```

You can change directory into your new volume:


```bash
cd /mnt/vdc
```

## Create folders

In directory:


```bash
cd /mnt/vdc
```

Create a new folder called tfx with a subfolder first-pipeline 


```bash
sudo mkdir tfx/first-pipeline

```

/mnt/vdc/tfx/first-pipeline

sudo chmod a+rwx /mnt/vdc/tfx/first-pipeline

a means "all" (users) + means "add the following rights" and rwx means read, write and execute respectively.

## Unmount

If you ever need to unmount a mounted drive in Ubuntu use:

::: {.callout-important}
## Use this command with caution

Note that we need the partition for our course und you should not unmount it wihtout good reasons to doing so
:::

```bash
sudo umount -l /dev/vdc
```