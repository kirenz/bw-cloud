[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cloud Architecure",
    "section": "",
    "text": "Introduction\nThe bwCloud is an “infrastructure-as-a-service” environment, specially developed and operated for research and teaching in Baden-Württemberg.\nWith the bwCloud, virtual servers or virtual machines (VMs) can be created, started and operated. These virtual machines include resources such as virtual CPUs (vCPUs), main memory (RAM), network access (IPv4 and IPv6 addresses) and storage space (storage) and do not differ in operation and administration from “real” physical machines.\nThis online book covers how to set up bwCloud."
  },
  {
    "objectID": "instance.html",
    "href": "instance.html",
    "title": "Virtual Machine",
    "section": "",
    "text": "tbd"
  },
  {
    "objectID": "instance-register.html",
    "href": "instance-register.html",
    "title": "1  Register for bwCloud SCOPE",
    "section": "",
    "text": "Registration is required to use the bwCloud infrastructure.\n\nVisit this site and choose your home organization and click on “Proceed” or press enter.\nRegister for “bwCloud SCOPE”"
  },
  {
    "objectID": "key-pairs-create.html#what-is-ssh",
    "href": "key-pairs-create.html#what-is-ssh",
    "title": "2  Create SSH-Key",
    "section": "2.1 What is SSH?",
    "text": "2.1 What is SSH?\nSSH (Secure Shell) is a software package that enables secure system administration and file transfers over insecure networks. It is used in nearly every data center and in every large enterprise.\nAlthough SSH provides an encrypted connection, using passwords with SSH connections would leave our virtual machine (VM) in bwCloud vulnerable to attacks. Therefore, we connect to our VM over SSH using a public-private key pair, also known as SSH keys.\n\nThe public key is placed on your VM.\nThe private key remains on your local system. Protect this private key. Do not share it.\n\nWhen you use an SSH client to connect to your VM (which has the public key), the remote VM tests the client to make sure it has the correct private key. If the client has the private key, it’s granted access to the VM."
  },
  {
    "objectID": "key-pairs-create.html#create-ssh-keys-in-windows",
    "href": "key-pairs-create.html#create-ssh-keys-in-windows",
    "title": "2  Create SSH-Key",
    "section": "2.2 Create SSH-Keys in Windows",
    "text": "2.2 Create SSH-Keys in Windows\nFollow the instructions provided in bwCloud: SSH-Key Paar erzeugen"
  },
  {
    "objectID": "key-pairs-create.html#create-ssh-keys-in-macos",
    "href": "key-pairs-create.html#create-ssh-keys-in-macos",
    "title": "2  Create SSH-Key",
    "section": "2.3 Create SSH-Keys in MacOS",
    "text": "2.3 Create SSH-Keys in MacOS\n\n2.3.1 Create key\nOpen a terminal and run the following command:\nssh-keygen\nThis will output:\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/username/.ssh/id_rsa):\nPress enter to save your keys to the default /Users/username/.ssh directory.\nAfter entering and confirming your password, you’ll see something like the following:\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/username/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/username/.ssh/id_rsa\nYour public key has been saved in /Users/username/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:BOJAxs0Rkhusd9Hq/xdqWDnfd1cdxN5Uk+hD2gNwNLA1HvUM username@somename.local\nThe key's randomart image is:\n+---[RSA 3072]----+\n| .o*O ..D.BB+...o|\n|  .*. .  +o+=E...|\n|   ..        ..oo|\n|    . ..    oo o=|\n|   . . .S     o +|\n|           . .  .|\n|   ..o. . D.     |\n|   .+. .   XC    |\n|  .o.o.   L.     |\n+----[SHA256]-----+"
  },
  {
    "objectID": "key-pairs-create.html#set-permissions",
    "href": "key-pairs-create.html#set-permissions",
    "title": "2  Create SSH-Key",
    "section": "2.4 Set permissions",
    "text": "2.4 Set permissions\nNext, we use chmod to change permissions (otherwise, bwCloud will refuse the connection).\n\n\n\n\n\n\nIn Unix and Unix-like operating systems, chmod is the command and system call used to change the access permissions of files and directories. The name chmod was chosen as an abbreviation of change mode.\n\n\n\nChmod 700 sets folder permissions so that only the owner can read, write and execute files in this folder:\nchmod 700 .ssh\nPermissions of 600 mean that the owner has full read and write access to the file, while no other user can access the file:\nchmod 600 .ssh/id_rsa"
  },
  {
    "objectID": "key-pairs-create.html#mac-finder",
    "href": "key-pairs-create.html#mac-finder",
    "title": "2  Create SSH-Key",
    "section": "2.5 Mac Finder",
    "text": "2.5 Mac Finder\n\nOpen Finder and navigate to your/Users/username/\n\n\n\n\n\n\n\nHow to show your home folder in Finder\n\n\n\n\n\nIf you don’t find your home: In Finder, click on the menue and choose: Finder &gt; Preference &gt; Sidebar &gt; Show these items in the sidebar and checkmark the box beside the home icon.\n\n\n\n\nNow press the Command + Shift + . (period) keys at the same time. The hidden files will show up as translucent in your folder.\nOpen the folder .ssh.\nYou should see your public SSH key (id_rsa.pub) and private SSH key (id_rsa)"
  },
  {
    "objectID": "key-pairs-create.html#import-public-key",
    "href": "key-pairs-create.html#import-public-key",
    "title": "2  Create SSH-Key",
    "section": "2.6 Import public key",
    "text": "2.6 Import public key\n\nOpen your bwCloud Dashboard\nNavigate to Key Pairs in the left side menue.\nClick on Import Public Key\nProvide a Key Name and choose Key Type SSH Key.\nNow open your public key id_rsa.pub in a code editor like VS Code and copy and paste the content into Public Key"
  },
  {
    "objectID": "instance-create.html#details",
    "href": "instance-create.html#details",
    "title": "3  Create a launch instance",
    "section": "3.1 Details",
    "text": "3.1 Details\n\n\nProvide the instance name. We choose: bwcloud\nProvide a description for the instance, e.g. bwCloud virtual machine\nChoose count 1"
  },
  {
    "objectID": "instance-create.html#source",
    "href": "instance-create.html#source",
    "title": "3  Create a launch instance",
    "section": "3.2 Source",
    "text": "3.2 Source\n\nInstance source is the template used to create an instance.\n\nChoose Ubuntu 22.04 (click on the arrow at the right)"
  },
  {
    "objectID": "instance-create.html#flavor",
    "href": "instance-create.html#flavor",
    "title": "3  Create a launch instance",
    "section": "3.3 Flavor",
    "text": "3.3 Flavor\n\nFlavors manage the sizing for the compute, memory and storage capacity of the instance. We use m1.nano.\n\nChoose m1.nano (click on the arrow at the right)"
  },
  {
    "objectID": "instance-create.html#networks",
    "href": "instance-create.html#networks",
    "title": "3  Create a launch instance",
    "section": "3.4 Networks",
    "text": "3.4 Networks\n\nNetworks provide the communication channels for instances in the cloud.\n\nWe use public-belwue"
  },
  {
    "objectID": "instance-create.html#network-ports",
    "href": "instance-create.html#network-ports",
    "title": "3  Create a launch instance",
    "section": "3.5 Network Ports",
    "text": "3.5 Network Ports\nPorts provide extra communication channels to your instances. You can select ports instead of networks or a mix of both.\n\nWe dont use network ports"
  },
  {
    "objectID": "instance-create.html#security-groups",
    "href": "instance-create.html#security-groups",
    "title": "3  Create a launch instance",
    "section": "3.6 Security Groups",
    "text": "3.6 Security Groups\n\nChoose default and your custom security groups\nFollow this bwCloud-tutorial to open a port."
  },
  {
    "objectID": "instance-create.html#key-pair",
    "href": "instance-create.html#key-pair",
    "title": "3  Create a launch instance",
    "section": "3.7 Key Pair",
    "text": "3.7 Key Pair\n\n\nSelect the key pair from step create-key-pairs.\nHere, it’s called “id-rsa-pub”"
  },
  {
    "objectID": "instance-create.html#launch-instance",
    "href": "instance-create.html#launch-instance",
    "title": "3  Create a launch instance",
    "section": "3.8 Launch Instance",
    "text": "3.8 Launch Instance\n\n\nWe are done and you can click on “Launch Instance”."
  },
  {
    "objectID": "instance-create.html#dashboard",
    "href": "instance-create.html#dashboard",
    "title": "3  Create a launch instance",
    "section": "3.9 Dashboard",
    "text": "3.9 Dashboard\n\n\nRefresh your browser\nYou should see your newly created instance in your dashboard.\nClick on the instance name to see more details"
  },
  {
    "objectID": "instance-login.html#terminal",
    "href": "instance-login.html#terminal",
    "title": "4  Log into instance",
    "section": "4.1 Terminal",
    "text": "4.1 Terminal\n\n4.1.1 Mac\nChange the IP adress and enter\nssh -i .ssh/id_rsa ubuntu@193.196.52.36\nIf you are asked: Are you sure you want to continue connecting (yes/no/[fingerprint])?\nEnter “yes”.\nEnter passphrase for key ‘.ssh/id_rsa’:\nProvide your password"
  },
  {
    "objectID": "vs-code-ssh.html#prerequisites",
    "href": "vs-code-ssh.html#prerequisites",
    "title": "5  Visual Studio Code & SSH",
    "section": "5.1 Prerequisites",
    "text": "5.1 Prerequisites\nTo get started, you need to have done the following steps:\n\nIf you use Windows, you need to install an OpenSSH compatible SSH client (PuTTY is not supported)\nInstall Visual Studio Code\nInstall all necessary local VS Code extensions by importing this profile remote-ssh(choose “Import Profile in Visual Studio Code”)"
  },
  {
    "objectID": "vs-code-ssh.html#connect-using-ssh",
    "href": "vs-code-ssh.html#connect-using-ssh",
    "title": "5  Visual Studio Code & SSH",
    "section": "5.2 Connect using SSH",
    "text": "5.2 Connect using SSH\n\nWithin VS Code, you should see a status bar item at the far left (at the bottom) in VS Code.\nThe Remote Status bar item can quickly show you in which context VS Code is running (local or remote) and clicking on the item will bring up the Remote - SSH command.\nChoose the “Connect to Host…” command in the Remote-SSH section and connect to the host by entering connection information for your VM in the following format (replace x with your IP): ubuntu@xxx.xxx.xx.xx\nIf propmted, enter your passphrase (SSH-key password) in VS Code.\nOpen VS Code’s integrated terminal (in the menue, select Terminal -&gt; new Terminal), to be able to work inside a bash shell."
  },
  {
    "objectID": "vs-code-ssh.html#install-extensions-on-ssh-host",
    "href": "vs-code-ssh.html#install-extensions-on-ssh-host",
    "title": "5  Visual Studio Code & SSH",
    "section": "5.3 Install extensions on SSH host",
    "text": "5.3 Install extensions on SSH host\nInstall all locally installed extensions on the SSH host:\n\nGo to the Extensions view\nUse the cloud button at the right of the “SSH: {Hostname}”” title bar.\nThis will display a dropdown where you can select which locally installed extensions to install on your SSH host (select all)."
  },
  {
    "objectID": "instance-storage-increase.html#increase-cloud-storage",
    "href": "instance-storage-increase.html#increase-cloud-storage",
    "title": "6  Increase Cloud Storage",
    "section": "6.1 Increase Cloud Storage",
    "text": "6.1 Increase Cloud Storage\n\n6.1.1 Select Volumes\n\n\nLog in to bwCloud Dashboard\nClick on “Volumes” below the “Project” tab\n\n\n\n\n6.1.2 Choose “Create Volume”\n\n\nAn overview of the volumes you have created so far is displayed. To create a new volume, click on Create Volume\n\n\n\n6.1.3 Create Volume in dialogue\n\n\nA dialogue opens. Fill in the fields:\n\n\nVolume name: storage\nSize: 40 GiB\n\n\nThen click on Create Volume.\n\n\n\n6.1.4 Attach the volume\n\nIn order for a volume to be used by a virtual machine, it must be added (“attached”) to a VM.\n\nIn the table row of our new volume “storage”, select the subitem “Manage Attachments” in the context menu at the right end of the row and click on the entry.\n\n\n\n6.1.5 Attach volumes\n\n\nA dialogue opens: In the dialogue, select the desired virtual machine (“bwCloud”) and click on “Attach Volume”.\nThe table updates and the path under which the new volume can be reached from within the virtual machine appears in the “Attached To field”:\n\n/dev/vdb on bwCloud"
  },
  {
    "objectID": "instance-storage-increase.html#mount-volume-in-vm",
    "href": "instance-storage-increase.html#mount-volume-in-vm",
    "title": "6  Increase Cloud Storage",
    "section": "6.2 Mount volume in VM",
    "text": "6.2 Mount volume in VM\nIn Linux, the process of attaching a filesystem to a particular point in the directory tree is called mounting. This allows you to access the files and directories on the filesystem as if they were part of the filesystem on which you are currently working.\n\n6.2.1 Log in your VM\n\nConnect to your virtual machine with VS Code remote connection (or your terminal)\n\n\n\n6.2.2 Find volumne\n\nEnter the follwing command in the integrated terminal to find your volume (i.e. disk) using:\n\nsudo fdisk -l\nThe output should include an entry like the following:\n\nDisk /dev/vdb: 40 GiB, 42949672960 bytes, 83886080 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\n6.2.3 Partitioning\nNext, we need to partition our volume.\n\nThis command will create a GPT (GUID Partition Table), which is a standard for the layout of the partition table on a physical storage device:\n\nsudo parted /dev/vdb mklabel gpt\nThis will output: “Warning: The existing disk label on /dev/vdb will be destroyed and all data on this disk will be lost. Do you want to continue?”\n\nType: Yes\nWithin the partition environment, you can also set the size of the partition. In our case, we set the upper bound to 100%:\n\nsudo parted /dev/vdb mkpart primary ext4 0% 100%\n\n\n6.2.4 Format partition\nWe want to format the partition with the ext4 filesystem. ext4 stands for “extended file system version 4”, which is a popular filesystem used in Linux systems to store and organize files on a storage device, such as a hard drive or solid-state drive.\n\nFormat the partition:\n\nsudo mkfs.ext4 /dev/vdb\nThis will output: Found a gpt partition table in /dev/vdb Proceed anyway? (y,N)\n\nType: Yes\n\n\n\n6.2.5 Mounting\nBefore we mount the drive, we create a new directory in the /mnt/ directory where the drives are usually mounted in Ubuntu:\nsudo mkdir /mnt/vdb\nOnce the directory is created, you can mount the drive as follows:\nsudo mount /dev/vdb /mnt/vdb\nTo mount the drive permanently, we need to edit the file system table fstab. Therefore, we open the file with the text editor nano:\nsudo nano /etc/fstab\nNow, add the following content at the end of the file:\n/dev/vdb    /mnt/vdb     ext4      defaults        0             0\nIt means that the partition located at /dev/vdb will be mounted to /mnt/vdb using the file system ext4, with default mount options and no dumping and no error-checking enabled.\nNext, press\n\nCtrl+O and confirm with enter to save the modifications you’ve made to the file\nCtrl+X to close nano.\n\nTo check if everything worked fine, we use sudo mount to list all mounted drives and combine it with grep vdb, which only returns our volume vdb:\nsudo mount | grep vdb\nThis should output something like:\n/dev/vdb on /mnt/vdb type ext4 (rw,relatime)\nYou can change directory into your new volume and use it later to create new directories and store data in it:\ncd /mnt/vdb"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Programming toolkit",
    "section": "",
    "text": "tbd"
  },
  {
    "objectID": "python-miniforge-setup.html#prepare-environment",
    "href": "python-miniforge-setup.html#prepare-environment",
    "title": "7  Install Python with miniforge",
    "section": "7.1 Prepare environment",
    "text": "7.1 Prepare environment\n\nChange directory into your volume:\n\ncd /mnt/vdb\n\nCreate a folder called bin\n\nsudo mkdir bin"
  },
  {
    "objectID": "python-miniforge-setup.html#install-miniforge",
    "href": "python-miniforge-setup.html#install-miniforge",
    "title": "7  Install Python with miniforge",
    "section": "7.2 Install miniforge",
    "text": "7.2 Install miniforge\n\nChange directory into bin\n\ncd bin\n\nDownload the latest Miniforge3 installer:\n\nsudo curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\n\nStart the installation porcess:\n\nsudo bash Miniforge3-$(uname)-$(uname -m).sh\n\nPress ENTER and scroll down, then type yes and press ENTER.\nIf asked where to store miniforge, type in your partition as location:\n\n/mnt/vdb/miniforge\n\nIf asked: “Do you wish the installer to initialize Miniforge3 by running conda init? [yes|no]”, type yes\nRun sudo su (that will open a shell as the superuser)\n\nsudo su\n\nNow add miniforge to path as shown in the command below:\n\nexport PATH=/mnt/vdb/miniforge/bin:$PATH\n\nInitialize all shells with:\n\nconda init --all"
  },
  {
    "objectID": "python-miniforge-setup.html#update-path",
    "href": "python-miniforge-setup.html#update-path",
    "title": "7  Install Python with miniforge",
    "section": "7.3 Update path",
    "text": "7.3 Update path\n\nTo be able to use miniforge, you’ll need to update the PATH environment variable and make sure that the VS Code environment is aware of your Miniforge installation.\nOpen the bash.bashrc file with nano:\n\nsudo nano /etc/bash.bashrc\nUpdate your PATH environment variable. Copy and paste the following lines at the end of the file:\nexport MINIFORGE_HOME=\"/mnt/vdb/miniforge3\"\n\nexport PATH=\"$MINIFORGE_HOME/bin:$PATH\"\n\nNext, press\n\n\nCtrl+O and confirm with enter to save the modifications you’ve made to the file\nCtrl+X to close nano.\n\n\n\nFor changes to take effect, close (use the kill terminal icon 🗑 in VS Code)."
  },
  {
    "objectID": "python-miniforge-setup.html#start-jupyter-notebook-in-vs-code",
    "href": "python-miniforge-setup.html#start-jupyter-notebook-in-vs-code",
    "title": "7  Install Python with miniforge",
    "section": "7.4 Start Jupyter Notebook in VS Code",
    "text": "7.4 Start Jupyter Notebook in VS Code\nIn Visual Studio Code:\n\nCreate a Jupyter Notebook file\nNext, select a kernel using the “Select Kernel” picker in the top right\nSelect Python Environments\n\n\n\nIf you can’t see your miniforge environment:\nYou can also manually specify an interpreter if Visual Studio Code doesn’t locate your kernel automatically.\n\nShow command palette: Press cmd+shift+p (Mac) or strl+shift+p (Windows)\nSearch for `Python: Select Interpreter´\nSelect + enter interpreter path\nChoose the path (in my case: /mnt/vdc/miniforge/bin/python3.10 )\n\nIf the steps described above should not work for you, take a look at other tips at StackOverflow."
  },
  {
    "objectID": "docker.html",
    "href": "docker.html",
    "title": "Docker",
    "section": "",
    "text": "tbd"
  },
  {
    "objectID": "docker-setup.html#set-up-docker-repository",
    "href": "docker-setup.html#set-up-docker-repository",
    "title": "8  Docker set up",
    "section": "8.1 Set up Docker repository",
    "text": "8.1 Set up Docker repository\nBefore you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.\n\nUpdate the apt package index:\n\nsudo apt-get update\n\nInstall packages to allow apt to use a repository over HTTPS:\n\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\nConfirm the installation with Y\nAdd Docker’s official GPG key:\n\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\nUse the following command to set up the repository:\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null"
  },
  {
    "objectID": "docker-setup.html#install-docker-engine",
    "href": "docker-setup.html#install-docker-engine",
    "title": "8  Docker set up",
    "section": "8.2 Install Docker Engine",
    "text": "8.2 Install Docker Engine\n\nAgain, update the apt package index:\n\nsudo apt-get update\n\nInstall Docker Engine, containerd, and Docker Compose:\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\nPress Y to continue\nVerify that the Docker Engine installation is successful by running the hello-world image:\n\nsudo docker run hello-world\nThis command downloads a test image and runs it in a container. When the container runs, it prints a confirmation message and exits.\nGreat! You have now successfully installed and started Docker Engine."
  },
  {
    "objectID": "docker-location.html",
    "href": "docker-location.html",
    "title": "9  Change docker location",
    "section": "",
    "text": "The standard data directory used for docker is /var/lib/docker on our virtual machine. Since this directory will store a lot of data it can become quite large. Therefore, we move the docker data directory to our volumne mnt/vdb.\nHere are the steps to move the directory:\n\nStop docker daemon\n\nsudo systemctl stop docker\n\nCreate a new docker directory in /mnt/vdb:\n\nsudo mkdir -p /mnt/vdb/docker\n\nMake a copy of your current docker directory in the new location:\n\nsudo rsync -a /var/lib/docker/ /mnt/vdb/docker\n\nCreate a backup\n\nsudo mv /var/lib/docker /var/lib/docker-backup\n\nCreate a symbolic link (symlink):\n\nsudo ln -s /mnt/vdb/docker /var/lib/docker\n\nStart docker:\n\nsudo systemctl start docker\n\nCheck if the docker image “hello-world” is still accessible:\n\nsudo docker ps -a\nYou can now remove your backup:\nsudo rm -rf /var/lib/docker-backup\nThat’s it!"
  }
]