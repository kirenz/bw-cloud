# Kubernetes setup

You can download Kubernetes to deploy a Kubernetes cluster on a local machine, into the cloud, or for your own datacenter. 

We will install Kubernetes in our vdb volume using [kind](https://kind.sigs.k8s.io/) (Kubernetes IN Docker). 

Furthermore, we use the Kubernetes command-line tool `kubectl` which allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs. 

## Prerequisites

To create clusters with kind, you will first need to install Docker. If you haven't already, install Docker, following [these instructions](docker-start-prerequisites.qmd). 

## Kind installation

[kind](https://kind.sigs.k8s.io/) (Kubernetes IN Docker) is a tool for running local Kubernetes clusters using Docker container “nodes”. 

- We follow the official [installation guide](https://kind.sigs.k8s.io/docs/user/quick-start/#installing-from-release-binaries) and download the latest binary (v0.18.0 at the time of this writing). 


Change directory

```bash
cd /mnt/vdb
```

```bash
sudo curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64
```

- Change permissions and rename it to kind:

```bash
sudo chmod +x ./kind

```

- Create a symbolic link (symlink):


```bash
sudo ln -s /mnt/vdb/kind /usr/local/bin/kind
```



### Creating a Cluster 

- Creating a Kubernetes cluster is as simple as `kind create cluster` (visit [this site](https://kind.sigs.k8s.io/docs/user/quick-start/#creating-a-cluster) to learn more).

```bash
sudo kind create cluster
```

This will bootstrap a Kubernetes cluster using a pre-built node image. Prebuilt images are hosted at [kindest/node](https://hub.docker.com/r/kindest/node/).


## kubectl installation

After creating a cluster, you can use [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) to interact with it by using the configuration file generated by kind. We follow the [official installation tutorial](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/) to install kubectl. 

- Change directory

```bash
cd /mnt/vdb
```

- Create a new directory

```bash
mkdir bin
```



- Download the latest release with the command:

```bash
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

```


- Install kubectl

```bash
sudo install -o root -g root -m 0755 kubectl /mnt/vdb/bin/kubectl
```

- Create a symbolic link (symlink):


```bash
sudo ln -s /mnt/vdb/bin/kubectl /usr/local/bin/kubectl
```

<!--
OLD
```bash
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
```
-->


- Test to ensure the version you installed is up-to-date:

```bash
kubectl version --client --output=yaml
```

## Config file

<!--

- Take a look at the location of your config file

```bash
sudo kubectl get pod -v6 
```
-->

- Set the config file to the correct path:

```bash
export KUBECONFIG=/root/.kube/config
```

- Ensure that the correct context is being used by running:

```bash
sudo kubectl config use-context kind-kind
```


## Interacting With Your Cluster

<!--
After creating a cluster with kind, you can use kubectl to interact with it by using the configuration file generated by kind. By default, the cluster access configuration is stored in ${HOME}/.kube/config if $KUBECONFIG environment variable is not set.

In order for kubectl to find and access a Kubernetes cluster, it needs a kubeconfig file, which is created automatically when you create a cluster using kube-up.sh or successfully deploy a Minikube cluster. 

By default, kubectl configuration is located at ~/.kube/config.
-->

- Check that kubectl is properly configured by getting the cluster state:


```bash
sudo kubectl cluster-info

```

- List any existing Pods

```bash
sudo kubectl get pods

```

This should output: "No resources found in default namespace."


<!--

## Loading an Image Into Your Cluster 

Docker images can be loaded into your cluster nodes with:

`kind load docker-image my-custom-image-0 my-custom-image-1`

Note: If using a named cluster you will need to specify the name of the cluster you wish to load the images into: kind load docker-image my-custom-image-0 my-custom-image-1 --name kind-2

-->

## Prepare environment

In the following steps, we will use some of Nigel Poulton's examples from "The Kubernetes Book (2022)". Therefore, we will clone his GitHub-repo on our virtual machine.

- Change directory to `mnt/vdb`

```bash
cd /mnt/vdb
```
- Make a new directory:

```bash
mkdir github
```

- Change into the directory:


```bash
cd github
```

- Clone this GitHub-repo into the directory:

```bash
git clone https://github.com/nigelpoulton/TheK8sBook.git
```


