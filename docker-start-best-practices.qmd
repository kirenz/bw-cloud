# Image-building best practices

## Image layering

Did you know that you can look at what makes up an image? Using the ` docker image history`
command, you can see the command that was used to create each layer within an image.

- Use the `docker image history` command to see the layers in the `getting-started` image you
   created earlier in the tutorial.

```bash
sudo docker image history getting-started
```

Each of the lines in the output represents a layer in the image. Using this, you can also quickly see the size of each layer, helping diagnose large images.

- You'll notice that several of the lines are truncated. If you add the `--no-trunc` flag, you'll get the full output:

```bash
sudo docker image history --no-trunc getting-started
```

## Layer caching

Now that you've seen the layering in action, there's an important lesson to learn to help decrease build times for your container images.

> Once a layer changes, all downstream layers have to be recreated as well

Let's look at the Dockerfile we were using one more time...

```dockerfile
# syntax=docker/dockerfile:1
FROM node:18-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
```

Going back to the image history output, we see that each command in the Dockerfile becomes a new layer in the image.
You might remember that when we made a change to the image, the yarn dependencies had to be reinstalled. Is there a
way to fix this? It doesn't make much sense to ship around the same dependencies every time we build, right?

To fix this, we need to restructure our Dockerfile to help support the caching of the dependencies. For Node-based
applications, those dependencies are defined in the `package.json` file. So, what if we copied only that file in first,
install the dependencies, and _then_ copy in everything else? Then, we only recreate the yarn dependencies if there was
a change to the `package.json`. Make sense?

- Update the Dockerfile to copy in the `package.json` first, install dependencies, and then copy everything else in.

```dockerfile
# syntax=docker/dockerfile:1
FROM node:18-alpine
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --production
COPY . .
CMD ["node", "src/index.js"]
EXPOSE 3000
```

- Next, we create a file named `.dockerignore` (in the same folder as the Dockerfile) and include the text `node_modules`. We use the terminal to accomplish this:

```bash
echo "node_modules" > .dockerignore
```

`.dockerignore` files are an easy way to selectively copy only image relevant files. You can read more about this [here](https://docs.docker.com/engine/reference/builder.md#dockerignore-file).

In this case, the `node_modules` folder should be omitted in the second `COPY` step because otherwise,
it would possibly overwrite files which were created by the command in the `RUN` step.
For further details on why this is recommended for Node.js applications and other best practices, have a look at their guide on
[Dockerizing a Node.js web app](https://nodejs.org/en/docs/guidenodejs-docker-webapp/)

- Build a new image using `docker build`.

```bash
sudo docker build -t getting-started .
```

You should see output like this...

```bash
[+] Building 15.4s (10/10) FINISHED                                
 => [internal] load build definition from Dockerfile          0.2s
 => => transferring dockerfile: 182B                          0.0s
 => [internal] load .dockerignore                             0.3s
 => => transferring context: 53B                              0.0s
 => [internal] load metadata for docker.io/library/node:18-a  0.0s
 => [internal] load build context                             0.2s
 => => transferring context: 3.22kB                           0.2s
 => [1/5] FROM docker.io/library/node:18-alpine               0.0s
 => CACHED [2/5] WORKDIR /app                                 0.0s
 => [3/5] COPY package.json yarn.lock ./                      0.7s
 => [4/5] RUN yarn install --production                      12.2s
 => [5/5] COPY . .                                            0.5s
 => exporting to image                                        1.5s
 => => exporting layers                                       1.5s
 => => writing image sha256:19dfa47bc86d7dceaa01a048c43a7dbc  0.0s
 => => naming to docker.io/library/getting-started            0.0s
```

You'll see that all layers were rebuilt. Perfectly fine since we changed the Dockerfile quite a bit.

- Now, make a change to the `src/static/index.html` file (like change the `<title>` to say "The Awesome Todo App" in line 11).

- Build the Docker image now using `sudo docker build -t getting-started .` again. This time, your output should look a little different.

```bash
 => [internal] load build definition from Dockerfile          0.2s
 => => transferring dockerfile: 182B                          0.0s
 => [internal] load .dockerignore                             0.3s
 => => transferring context: 53B                              0.0s
 => [internal] load metadata for docker.io/library/node:18-a  0.0s
 => [1/5] FROM docker.io/library/node:18-alpine               0.0s
 => [internal] load build context                             0.0s
 => => transferring context: 3.45kB                           0.0s
 => CACHED [2/5] WORKDIR /app                                 0.0s
 => CACHED [3/5] COPY package.json yarn.lock ./               0.0s
 => CACHED [4/5] RUN yarn install --production                0.0s
 => [5/5] COPY . .                                            0.3s
 => exporting to image                                        0.1s
 => => exporting layers                                       0.1s
 => => writing image sha256:a85579d9ee5192bc7593ad0b2f263d25  0.0s
 => => naming to docker.io/library/getting-started            0.0s
```

First off, you should notice that the build was MUCH faster! And, you'll see that several steps are using previously cached layers. So, yes! We're using the build cache. Pushing and pulling this image and updates to it will be much faster as well. 

<!--

## Multi-stage builds

While we're not going to dive into it too much in this tutorial, multi-stage builds are an incredibly powerful
tool to help use multiple stages to create an image. There are several advantages for them:

- Separate build-time dependencies from runtime dependencies
- Reduce overall image size by shipping _only_ what your app needs to run

### Maven/Tomcat example

When building Java-based applications, a JDK is needed to compile the source code to Java bytecode. However,
that JDK isn't needed in production. Also, you might be using tools like Maven or Gradle to help build the app.
Those also aren't needed in our final image. Multi-stage builds help.

```dockerfile
# syntax=docker/dockerfile:1
FROM maven AS build
WORKDIR /app
COPY . .
RUN mvn package

FROM tomcat
COPY --from=build /app/target/file.war /usr/local/tomcat/webapps 
```

In this example, we use one stage (called `build`) to perform the actual Java build using Maven. In the second
stage (starting at `FROM tomcat`), we copy in files from the `build` stage. The final image is only the last stage
being created (which can be overridden using the `--target` flag).

### React example

When building React applications, we need a Node environment to compile the JS code (typically JSX), SASS stylesheets,
and more into static HTML, JS, and CSS. If we aren't doing server-side rendering, we don't even need a Node environment
for our production build. Why not ship the static resources in a static nginx container?

```dockerfile
# syntax=docker/dockerfile:1
FROM node:18 AS build
WORKDIR /app
COPY package* yarn.lock ./
RUN yarn install
COPY public ./public
COPY src ./src
RUN yarn run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
```

Here, we are using a `node:18` image to perform the build (maximizing layer caching) and then copying the output
into an nginx container. Cool, huh?

-->

## Next steps

By understanding a little bit about the structure of images, you can build images faster and ship fewer changes.
Scanning images gives you confidence that the containers you are running and distributing are secure.

<!--

Multi-stage builds also help you reduce overall image size and increase final container security by separating
build-time dependencies from runtime dependencies.

-->

In the next section, you'll learn about additional resources you can use to continue learning about containers.

