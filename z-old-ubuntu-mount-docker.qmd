---
title: "Change volume for Docker Images"
subtitle: "Increase your machine’s docker image capacity" 
format: 
  html: 
    embed-resources: true
    theme: 
      - cosmo 
      - custom.scss 
    toc: true 
    number-depth: 3  
    toc-title: Contents 
    toc-location: left 
    number-sections: true 
    html-math-method: mathjax 
    smooth-scroll: true 
---
OLD???

In general, it is best to avoid using the root user account for everyday tasks, and to use sudo to run specific commands as needed, rather than switching to the root user account and running all commands with superuser privileges. This helps to reduce the risk of accidental damage to the system and ensures that all actions are logged and can be traced back to a specific user.

"su" stands for "switch user," and it allows a user to switch to another user account. When you run sudo su, you are effectively running the su command with superuser privileges, which means that you can switch to the root user account and have full access to all the files and system resources on the machine.

sudo su is a command that is used to switch to the root user account from another user account on a Unix-like operating system.

"sudo" is short for "superuser do," and it allows a user to run commands with administrative privileges. 

```bash
sudo su
```

/dev/vdb is your new disk 


Stop docker daemon,

```bash
systemctl stop docker

```

Move your current docker directory

```bash
mv /var/lib/docker /var/lib/docker-backup

```



Create a new docker directory

```bash
mk dir var/lib/docker

```

Mount your new file system

```bash
mount /dev/vdb /var/lib/docker

```
Reinstate your docker installation on the new file system

```bash
cp -rf /var/lib/docker-backup/* /var/lib/docker

```

Start docker

```bash
systemctl start docker
```

Test out your newly expanded capacity by pulling a new docker image and running it — here’s a postgres image as an example:


```bash
docker pull postgres
```

Start a postgres instance


```bash
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
```

The default postgres user and database are created in the entrypoint with initdb.

The postgres database is a default database meant for use by users, utilities and third party applications.


Mount On Startup

Assuming everything is now fine, you’ll want to ensure your disk gets mounted on the /var/lib/docker directory permanently on start-up:


```bash
nano /etc/fstab
```

Add the following line at the end of the file, again assuming /dev/vdb is your device and also assuming is formatted as an ext4 filesystem.



Rollback
If something goes wrong or for whatever reason, you want to return to your previous setup — you should be able to rollback in the following way:


```bash
systemctl stop docker
umount /dev/sda2
mv /var/lib/docker-backup /var/lib/docker
# Remove the additional line added to /etc/fstab (if applicable)
systemctl start docker
```

Cleanup
If you’re happy with the increased capacity in your docker installation and all has gone to plan, you can now remove your backup:


```bash
rm -rf /var/lib/docker-backup

```

Change back to our ubuntu user


```bash
su ubuntu
```
