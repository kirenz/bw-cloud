# Setup Kubernetes


## kind

kind (Kubernetes IN Docker) is a tool for running local Kubernetes clusters using Docker container “nodes”:

- kind supports multi-node (including HA) clusters
- kind supports building Kubernetes release builds from source. Support for make / bash or docker, in addition to pre-published builds
- kind supports Linux, macOS and Windows
- kind is a CNCF certified conformant Kubernetes installer

To create clusters with kind you will first need to install Docker. If you haven't already, install Docker, following the official instructions. If you have an existing installation, check your version and make sure you have the latest Docker.

### Installation


https://kind.sigs.k8s.io/docs/user/quick-start/#installing-with-a-package-manager

Download the binary:


```bash
sudo curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
```

Change permissions and rename it to kind:

```bash
sudo chmod +x ./kind

```

Move it to the binary installation directory:

```bash
sudo mv ./kind /usr/local/bin/kind

```


### Creating a Cluster 


https://kind.sigs.k8s.io/docs/user/quick-start/#creating-a-cluster

Create a Kubernetes cluster: 

```bash
sudo kind create cluster

```

This will bootstrap a Kubernetes cluster using a pre-built node image. 

Prebuilt images are hosted atkindest/node, but to find images suitable for a given release currently you should check the release notes for your given kind version (check with kind version) where you'll find a complete listing of images created for a kind release.


## kubectl


The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs. 


### Install kubectl

We follow the [official installation tutorial](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/)

We use the snap package manager, kubectl is available as a snap application.

A snap is a bundle of an app and its dependencies that works without modification across Linux distributions.


```bash
sudo snap install kubectl --classic

```

Show version:

```bash
sudo kubectl version --output=yaml

```

### Interacting With Your Cluster


After creating a cluster with kind, you can use kubectl to interact with it by using the configuration file generated by kind.

By default, the cluster access configuration is stored in ${HOME}/.kube/config if $KUBECONFIG environment variable is not set.

In order for kubectl to find and access a Kubernetes cluster, it needs a kubeconfig file, which is created automatically when you create a cluster using kube-up.sh or successfully deploy a Minikube cluster. 

By default, kubectl configuration is located at ~/.kube/config.


### Verify kubectl configuration 

Check that kubectl is properly configured by getting the cluster state:


```bash
sudo kubectl cluster-info

```


## Loading an Image Into Your Cluster 

Docker images can be loaded into your cluster nodes with:

`kind load docker-image my-custom-image-0 my-custom-image-1`

Note: If using a named cluster you will need to specify the name of the cluster you wish to load the images into: kind load docker-image my-custom-image-0 my-custom-image-1 --name kind-2
