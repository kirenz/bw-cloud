---
title: "Create a launch instance" 
format: 
  html: 
    embed-resources: true
    theme: 
      - cosmo 
      - custom.scss 
    toc: true 
    number-depth: 3  
    toc-title: Contents 
    toc-location: left 
    number-sections: true 
    html-math-method: mathjax 
    smooth-scroll: true 
---




1. Open your [bwCloud Dashboard](https://portal.bw-cloud.org)

1. Navigate to *Instances* in the left side menue.

1. Select *Launch Instance*


Now follow the steps outlined below.

## Details

 - Provide the instance name. We choose: `ml-pipeline-01`
 - Provide a description for the instance, e.g. `Example ML Pipeline`
 - Choose count `1`

![]()


## Source

- Instance source is the template used to create an instance.
- Choose `Ubuntu 22.04`


## Flavor

Flavors manage the sizing for the compute, memory and storage capacity of the instance.

- Choose `m1.large` (4 VCPUS, 8 GB Ram, 12 GB storage)

## Networks

Networks provide the communication channels for instances in the cloud.

- We use public-belwue

## Network Ports

Ports provide extra communication channels to your instances. You can select ports instead of networks or a mix of both.

- We dont use network ports

## Security Groups

- Choose default and your custom security groups

## Key Pair

- Select the key pair from step create-key-pairs. Here, it's called id-rsa-pub

## Launch Instance

We are done and you can click on Launch Instance. 

You should see your newly created instance in your dashboard.

Click on the instance name to see more details


## Increae Storage

1. Log in to [bwCloud Dashboard](https://bw-cloud.org/q/d)

1. Click on Volumes below Project → Volumes

1. An overview of the volumes you have created so far is displayed. To create a new volume, click on [Create Volume](https://portal.bw-cloud.org/project/volumes/create/)

1. A dialogue opens. Fill in the fields according to your requirements: block-device-01, We use 25 GiB.

1. Then click on Create Volume. The volume is created


In order for a volume to be used by a virtual machine, it must be added ("attached") to a VM.

1. In the table row of the desired volume, select the subitem Manage Attachments in the context menu at the right end of the row and click on the entry. 

A dialogue opens
In the dialogue, select the desired virtual machine (ml-pipeline-01) and click on Attach Volume

- The table updates and the path under which the new volume can be reached from within the virtual machine appears in the Attached To field

```
/dev/vdb on ml-pipeline-01
```

- Log into the virtual machine 


Check the external device:


```bash
sudo fdisk -l
```

This will output

```bash
...
Disk /dev/vdb: 25 GiB, 26843545600 bytes, 52428800 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
```

so for that you have to partition it first:



```bash
sudo parted /dev/vdb

```

After executing the above command, within the environment of the command, you should follow the command mentioned below to allow greater than 2GB’s partitions.


```bash
mklabel GPT

```

Within this partition environment, you can also set the size, it depends on the user’s choice to allocate the space, as in our case we are limiting the partition from GB to 3GB by using the following command: you just have to change the upper bound to have a partition of greater or lesser size.


```bash
mkpart primary 0GB 25GB

```

Once you have successfully attempted the above steps of partition; now you must assign a file system for the newly made partition. However, you can proceed only if you leave the parted environment; just type “quit” in the terminal and hit enter the terminal will come out of that environment:


```bash
quit
```

The final step to active the partition is assigning file format for the new partition; so, you have to choose the file system (.ext4) of the newly made partition by using the below-mentioned command:


```bash
sudo mkfs.ext4 /dev/vdb

```

Step 3: Mount Process : Once the partition step is performed, you can mount the drive; before this, you should create a new directory in the “/mnt/” directory where the drives are usually mounted in Ubuntu. Make new directory in “/mnt/” by using the terminal as mentioned below:



```bash
sudo mkdir /mnt/vdb

```

Once the directory is created, you can mount the inserted drive by using the command written below:


```bash
sudo mount /dev/vdb /mnt/vdb

```

However, it is observed that the below command will temporarily mount the drive, whenever you will restart the system, you must mount it again. To avoid such happening you must edit the file system table “fstab” by using the nano editor:


```bash
sudo nano /etc/fstab

```

Now, add the following content at the end of the file:



```bash
/dev/vdb    /mnt/vdb     ext4      defaults        0             0

```


Ctrl+O will save the modifications you've made to the file. Ctrl+X will close nano. 


How to check the drive is mounted or not

You can check the mounted drive by using the command mentioned below: you can specify the directory name (sdb in our case) after “grep” to get the pointed information; otherwise, the mount command will list down all the mounted drives and partitions in your system:


```bash
sudo mount | grep vdb

```
